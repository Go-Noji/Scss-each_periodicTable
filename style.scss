//eachで周期表を作る
//htmlは極力シンプルに設定
//cssの手打ちでは凄まじい労力を使うところを、JS等の配列+繰り返し処理のノリでスタイル情報を格納・格納できる
$PERCENT: 100; //パーセントのMAX値
$COLUMN: 18; //周期表の列数
$width: $PERCENT / $COLUMN; //カラム一つあたりの幅
$nonmetallicColor: #388E3C; //非金属元素
$noblegasColor: #FFA000; //希ガス
$alkalimetalColor: #303F9F; //アルカリ金属
$alkaliearthmetalColor: #7B1FA2; //アルカリ土類金属
$transitionelementColor: #616161; //遷移元素
$basemetalColor: #0097A7; //卑金属
$metalloidColor: #00796B; //半金属
$halogenColor: #d32f2f; //ハロゲン
$lanthanoidColor: #5D4037; //ランタノイド
$actinoidColor: #455A64; //アクチノイド
$solidColor: #4527A0; //固体
$liquidColor: #1565C0; //液体
$gasColor: #558B2F; //気体
//元素の属性説明部分の文字色
$attrs: $alkalimetalColor,
$alkaliearthmetalColor,
$transitionelementColor,
$basemetalColor,
$metalloidColor,
$nonmetallicColor,
$halogenColor,
$noblegasColor,
$lanthanoidColor,
$actinoidColor;
//元素の室温における状態説明部分の文字色
$states: $solidColor,
$liquidColor,
$gasColor;
//元素記号
$names:'H',
'He',
'Li',
'Be',
'B',
'C',
'N',
'O',
'F',
'Ne',
'Na',
'Mg',
'Al',
'Si',
'P',
'S',
'Cl',
'Ar',
'K',
'Ca',
'Sc',
'Ti',
'V',
'Cr',
'Mn',
'Fe',
'Co',
'Ni',
'Cu',
'Zn',
'Ga',
'Ge',
'As',
'Se',
'Br',
'Kr',
'Rb',
'Sr',
'Y',
'Zr',
'Nb',
'Mo',
'Tc',
'Ru',
'Rh',
'Pd',
'Ag',
'Cd',
'In',
'Sn',
'Sb',
'Te',
'I',
'Xe',
'Cs',
'Ba',
'La',
'Ce',
'Pr',
'Nd',
'Pm',
'Sm',
'Eu',
'Gd',
'Tb',
'Dy',
'Ho',
'Er',
'Tm',
'Yb',
'Lu',
'Hf',
'Ta',
'W',
'Re',
'Os',
'Ir',
'Pt',
'Au',
'Hg',
'Tl',
'Pb',
'Bi',
'Po',
'At',
'Rn',
'Fr',
'Ra',
'Ac',
'Th',
'Pa',
'U',
'Np',
'Pu',
'Am',
'Cm',
'Bk',
'Cf',
'Es',
'Fm',
'Md',
'No',
'Lr',
'Rf',
'Db',
'Sg',
'Bh',
'Hs',
'Mt',
'Ds',
'Rg',
'Cn',
'Uut',
'Fl',
'Uup',
'Lv',
'Uus',
'Uuo';
//元素の属性情報
$attrTables: $nonmetallicColor,
$noblegasColor,
$alkalimetalColor,
$alkaliearthmetalColor,
$metalloidColor,
$nonmetallicColor,
$nonmetallicColor,
$nonmetallicColor,
$halogenColor,
$noblegasColor,
$alkalimetalColor,
$alkaliearthmetalColor,
$basemetalColor,
$metalloidColor,
$nonmetallicColor,
$nonmetallicColor,
$halogenColor,
$noblegasColor,
$alkalimetalColor,
$alkaliearthmetalColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$basemetalColor,
$metalloidColor,
$metalloidColor,
$nonmetallicColor,
$halogenColor,
$noblegasColor,
$alkalimetalColor,
$alkaliearthmetalColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$basemetalColor,
$basemetalColor,
$metalloidColor,
$metalloidColor,
$halogenColor,
$noblegasColor,
$alkalimetalColor,
$alkaliearthmetalColor,
$lanthanoidColor,
$lanthanoidColor,
$lanthanoidColor,
$lanthanoidColor,
$lanthanoidColor,
$lanthanoidColor,
$lanthanoidColor,
$lanthanoidColor,
$lanthanoidColor,
$lanthanoidColor,
$lanthanoidColor,
$lanthanoidColor,
$lanthanoidColor,
$lanthanoidColor,
$lanthanoidColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$basemetalColor,
$basemetalColor,
$basemetalColor,
$metalloidColor,
$halogenColor,
$noblegasColor,
$alkalimetalColor,
$alkaliearthmetalColor,
$actinoidColor,
$actinoidColor,
$actinoidColor,
$actinoidColor,
$actinoidColor,
$actinoidColor,
$actinoidColor,
$actinoidColor,
$actinoidColor,
$actinoidColor,
$actinoidColor,
$actinoidColor,
$actinoidColor,
$actinoidColor,
$actinoidColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$transitionelementColor,
$basemetalColor,
$basemetalColor,
$basemetalColor,
$basemetalColor,
$halogenColor,
$noblegasColor;
//元素の室温における状態情報
$stateTables: $gasColor,
$gasColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$gasColor,
$gasColor,
$gasColor,
$gasColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$gasColor,
$gasColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$liquidColor,
$gasColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$gasColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$liquidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$gasColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor,
$solidColor;
//元素の列番号（ランタノイド・アクチノイドは便宜上の番号）
$xs: 1,
18,
1,
2,
13,
14,
15,
16,
17,
18,
1,
2,
13,
14,
15,
16,
17,
18,
1,
2,
3,
4,
5,
6,
7,
8,
9,
10,
11,
12,
13,
14,
15,
16,
17,
18,
1,
2,
3,
4,
5,
6,
7,
8,
9,
10,
11,
12,
13,
14,
15,
16,
17,
18,
1,
2,
3,
4,
5,
6,
7,
8,
9,
10,
11,
12,
13,
14,
15,
16,
17,
4,
5,
6,
7,
8,
9,
10,
11,
12,
13,
14,
15,
16,
17,
18,
1,
2,
3,
4,
5,
6,
7,
8,
9,
10,
11,
12,
13,
14,
15,
16,
17,
4,
5,
6,
7,
8,
9,
10,
11,
12,
13,
14,
15,
16,
17,
18;
//元素の行番号（ランタノイドは9、アクチノイドは10を便宜的に設定）
$ys: 1,
1,
2,
2,
2,
2,
2,
2,
2,
2,
3,
3,
3,
3,
3,
3,
3,
3,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
6,
6,
6,
9,
9,
9,
9,
9,
9,
9,
9,
9,
9,
9,
9,
9,
9,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
7,
7,
7,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7;
@mixin names {
  margin-left: 10px;
  font-size: 16px;
  font-weight: 700;
}

//初期設定
html,
body,
ul,
ol,
li,
h1,
h2 {
  margin: 0;
  padding: 0;
}

li {
  list-style-type: none;
}

body {
  font-family: "游ゴシック体", "Yu Gothic", YuGothic, "ヒラギノ角ゴ Pro", "Hiragino Kaku Gothic Pro", "メイリオ", "Meiryo", sans-serif;
}


/*
基礎知識

@eachの文法は

@each $val in $array {
  処理
}

である。
$arrayは開発者が事前に用意する必要のある変数で、

$array: 'hoge', 'huga', 'piyo';

といった形でカンマ区切りの文字列や数値、変数を格納しておく。
$attrで格納した要素の数だけ@eachは中の処理を繰り返し、コンパイル後のcssに追記していく。

$valは@eachの中で使うことになる、@eachを使う時に初めて宣言する変数である
@eachの{}内では$attrが持つ要素の数だけ繰り返し処理されるが、1回目の繰り返し時に$valは$attrの1番目の要素が代入された変数として使える。
同様に2回目の繰り返し時には$attrの2番目の要素、n回目の繰り返し時には$attrのn番目の要素が代入されていることになる。
*/


/*
インデックスについて

Scssの＠eachはjQUeryのeachのように標準でインデックス（今、繰り返し処理が何周目かを取得できる変数）を提供する機能が無いため、index関数で間接的にインデックスを得る
index関数は

index($attr, $val)

とすることで$attrの中で$valが格納されている場所のインデックス番号を返してくれる（今回は$indexの中に代入して使っている）。

ここで注意したいのが、$attrの一番最初の要素を表すインデックス番号が0ではなく1である事。
大多数のプログラミング言語が配列の最初を0と定義しているが、Scssでは1の方が都合がいいらしく、このような仕様になっているらしい。

nth-childや他の配列変数を使う際に便利。
他の配列変数に使うときは、

nth($array2, $index)

とすると$array2の中の$index番目にある要素が返ってくる。
*/

.colorDefine {
  width: 20%;
  min-width: 320px;
  display: flex;
  justify-content: space-between;
}

.attrs {
  dd {
    @include names;
    li {
      @each $attr in $attrs {
        //インデックス取得
        $index: index($attrs, $attr);
        &:nth-child(#{$index}) {
          color: $attr;
        }
      }
    }
  }
}

.states {
  dd {
    @include names;
    li {
      @each $state in $states {
        //インデックス番号取得
        $index: index($states, $state);
        &:nth-child(#{$index}) {
          color: $state;
        }
      }
    }
  }
}

.periodic {
  position: relative;
  box-sizing: border-box;
  min-width: 1650px;
  li {
    position: absolute;
    //'%'を加えて文字列かしてしまうと「'n%'」となってしまうので#{}で囲んで「n%」にする
    width: #{$width + '%'};
    //実はpadding-bottom, padding-topに%単位の数値を設定するとwidthの値を基とした計算をしてくれるのでcssで確実な正方形が作れる。
    height: 0;
    padding-bottom: #{$width + '%'};
    text-align: center;
    line-height: 120%;
    box-sizing: border-box;
    font-size: 10px;
    white-space: nowrap;
    @each $name in $names {
      //インデックス取得
      $index: index($names, $name);
      &:nth-child(#{$index}) {
        //'%'を加えて文字列化してしまうと「'n%'」となってしまうので#{}で囲んで「n%」にする
        left: #{(nth($xs, $index) - 1) * $width + '%'};
        //margin-bottom, margin-topも%単位の数値を設定するとwidthの値を基とした計算をしてくれる。cssのみで横軸と縦軸の位置を同じスケールで調節するときに使える
        margin-top: #{(nth($ys, $index) - 1) * $width + '%'};
        color: nth($stateTables, $index);
        border-bottom: nth($attrTables, $index) solid 6px;
        border-left: transparent solid 15px;
        border-right: transparent solid 15px;
        &:before {
          //#{}内であればクオーテーションの中でも変数の展開が行われる。変数の中身は数値だが、文字列（hogeではなく'hoge'）のプロパティが欲しいときはこのようにすると良い
          content: '#{$index}';
          display: block;
          margin-top: 30%;
          font-size: 12px;
        }
        &:after {
          content: $name;
          display: block;
          width: 90%;
          height: 0;
          padding-bottom: 40%;
          position: absolute;
          margin-top: 30%;
          left: 5%;
          font-size: 24px;
          font-weight: 700;
        }
      }
    }
  }
}